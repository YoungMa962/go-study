// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: Student.proto

package pbgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Student struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Male   bool    `protobuf:"varint,2,opt,name=male,proto3" json:"male,omitempty"`
	Scores []int32 `protobuf:"varint,3,rep,packed,name=scores,proto3" json:"scores,omitempty"`
}

func (x *Student) Reset() {
	*x = Student{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Student_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Student) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Student) ProtoMessage() {}

func (x *Student) ProtoReflect() protoreflect.Message {
	mi := &file_Student_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Student.ProtoReflect.Descriptor instead.
func (*Student) Descriptor() ([]byte, []int) {
	return file_Student_proto_rawDescGZIP(), []int{0}
}

func (x *Student) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Student) GetMale() bool {
	if x != nil {
		return x.Male
	}
	return false
}

func (x *Student) GetScores() []int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

var File_Student_proto protoreflect.FileDescriptor

var file_Student_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x70, 0x62, 0x67, 0x6f, 0x22, 0x49, 0x0a, 0x07, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6d, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x32, 0x69, 0x0a, 0x13, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x12, 0x0d, 0x2e, 0x70, 0x62, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x1a,
	0x0d, 0x2e, 0x70, 0x62, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x67, 0x6f,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x67, 0x6f, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x2e,
	0x2e, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x3b, 0x70, 0x62, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_Student_proto_rawDescOnce sync.Once
	file_Student_proto_rawDescData = file_Student_proto_rawDesc
)

func file_Student_proto_rawDescGZIP() []byte {
	file_Student_proto_rawDescOnce.Do(func() {
		file_Student_proto_rawDescData = protoimpl.X.CompressGZIP(file_Student_proto_rawDescData)
	})
	return file_Student_proto_rawDescData
}

var file_Student_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_Student_proto_goTypes = []interface{}{
	(*Student)(nil), // 0: pbgo.Student
}
var file_Student_proto_depIdxs = []int32{
	0, // 0: pbgo.HelloStudentService.Hello:input_type -> pbgo.Student
	0, // 1: pbgo.HelloStudentService.Channel:input_type -> pbgo.Student
	0, // 2: pbgo.HelloStudentService.Hello:output_type -> pbgo.Student
	0, // 3: pbgo.HelloStudentService.Channel:output_type -> pbgo.Student
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Student_proto_init() }
func file_Student_proto_init() {
	if File_Student_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Student_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Student); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Student_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Student_proto_goTypes,
		DependencyIndexes: file_Student_proto_depIdxs,
		MessageInfos:      file_Student_proto_msgTypes,
	}.Build()
	File_Student_proto = out.File
	file_Student_proto_rawDesc = nil
	file_Student_proto_goTypes = nil
	file_Student_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloStudentServiceClient is the client API for HelloStudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloStudentServiceClient interface {
	Hello(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	Channel(ctx context.Context, opts ...grpc.CallOption) (HelloStudentService_ChannelClient, error)
}

type helloStudentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloStudentServiceClient(cc grpc.ClientConnInterface) HelloStudentServiceClient {
	return &helloStudentServiceClient{cc}
}

func (c *helloStudentServiceClient) Hello(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/pbgo.HelloStudentService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloStudentServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (HelloStudentService_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloStudentService_serviceDesc.Streams[0], "/pbgo.HelloStudentService/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStudentServiceChannelClient{stream}
	return x, nil
}

type HelloStudentService_ChannelClient interface {
	Send(*Student) error
	Recv() (*Student, error)
	grpc.ClientStream
}

type helloStudentServiceChannelClient struct {
	grpc.ClientStream
}

func (x *helloStudentServiceChannelClient) Send(m *Student) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloStudentServiceChannelClient) Recv() (*Student, error) {
	m := new(Student)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloStudentServiceServer is the server API for HelloStudentService service.
type HelloStudentServiceServer interface {
	Hello(context.Context, *Student) (*Student, error)
	Channel(HelloStudentService_ChannelServer) error
}

// UnimplementedHelloStudentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelloStudentServiceServer struct {
}

func (*UnimplementedHelloStudentServiceServer) Hello(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedHelloStudentServiceServer) Channel(HelloStudentService_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}

func RegisterHelloStudentServiceServer(s *grpc.Server, srv HelloStudentServiceServer) {
	s.RegisterService(&_HelloStudentService_serviceDesc, srv)
}

func _HelloStudentService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloStudentServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbgo.HelloStudentService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloStudentServiceServer).Hello(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloStudentService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloStudentServiceServer).Channel(&helloStudentServiceChannelServer{stream})
}

type HelloStudentService_ChannelServer interface {
	Send(*Student) error
	Recv() (*Student, error)
	grpc.ServerStream
}

type helloStudentServiceChannelServer struct {
	grpc.ServerStream
}

func (x *helloStudentServiceChannelServer) Send(m *Student) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloStudentServiceChannelServer) Recv() (*Student, error) {
	m := new(Student)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloStudentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbgo.HelloStudentService",
	HandlerType: (*HelloStudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloStudentService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _HelloStudentService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Student.proto",
}
